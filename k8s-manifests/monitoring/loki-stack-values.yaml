# Loki-stack values for Solid Cloud

# Loki configuration
loki:
  enabled: true

  # Persistence for logs
  persistence:
    enabled: true
    size: 10Gi

  # Loki configuration
  config:
    auth_enabled: false

    ingester:
      chunk_idle_period: 3m
      chunk_block_size: 262144
      chunk_retain_period: 1m
      max_transfer_retries: 0
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      ingestion_rate_mb: 10
      ingestion_burst_size_mb: 20

    schema_config:
      configs:
      - from: 2020-10-24
        store: boltdb-shipper
        object_store: filesystem
        schema: v11
        index:
          prefix: index_
          period: 24h

    server:
      http_listen_port: 3100

    storage_config:
      boltdb_shipper:
        active_index_directory: /data/loki/boltdb-shipper-active
        cache_location: /data/loki/boltdb-shipper-cache
        cache_ttl: 24h
        shared_store: filesystem
      filesystem:
        directory: /data/loki/chunks

    chunk_store_config:
      max_look_back_period: 168h  # 7 days retention

    table_manager:
      retention_deletes_enabled: true
      retention_period: 168h  # 7 days

  # Service configuration
  service:
    type: ClusterIP
    port: 3100

# Promtail configuration
promtail:
  enabled: true

  config:
    # Server config
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    # Positions - where Promtail stores its position (offset) in the log files
    positions:
      filename: /tmp/positions.yaml

    # Loki client config
    clients:
      - url: http://{{ .Release.Name }}:3100/loki/api/v1/push

    # Scrape configs - how to scrape logs from pods
    scrape_configs:
      # Kubernetes pod logs
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod

        relabel_configs:
          # Only scrape pods in titanium-prod and monitoring namespaces
          - source_labels: [__meta_kubernetes_namespace]
            regex: (titanium-prod|monitoring)
            action: keep

          # Set namespace label
          - source_labels: [__meta_kubernetes_namespace]
            target_label: namespace

          # Set pod name label
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod

          # Set container name label
          - source_labels: [__meta_kubernetes_pod_container_name]
            target_label: container

          # Set app label
          - source_labels: [__meta_kubernetes_pod_label_app]
            target_label: app

          # Set job label
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_label_app]
            separator: /
            target_label: job

          # Set path to log file
          - source_labels: [__meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            target_label: __path__
            separator: /
            replacement: /var/log/pods/*$1/*.log

        # Pipeline stages for log processing
        pipeline_stages:
          - cri: {}

          # Try to parse JSON logs
          - json:
              expressions:
                level: level
                msg: message
                timestamp: timestamp

          # Extract log level
          - labels:
              level:

          # Set timestamp if available
          - timestamp:
              source: timestamp
              format: RFC3339Nano

  # Resources
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # DaemonSet - run on every node
  tolerations:
    - effect: NoSchedule
      operator: Exists

# Grafana integration
grafana:
  enabled: false  # We already have Grafana from kube-prometheus-stack
  sidecar:
    datasources:
      enabled: false

# Prometheus integration
prometheus:
  enabled: false  # We already have Prometheus

# ServiceMonitor for Promtail metrics
serviceMonitor:
  enabled: true
  labels:
    release: prometheus
