name: CI Pipeline

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'user-service/**'
      - 'blog-service/**'
      - 'auth-service/**'
      - 'api-gateway/**'
      - 'load-balancer/**'
      - 'dashboard-ui/**'
      - '.github/workflows/ci.yml'
  push:
    branches:
      - main
    paths:
      - 'user-service/**'
      - 'blog-service/**'
      - 'auth-service/**'
      - 'api-gateway/**'
      - 'load-balancer/**'
      - 'dashboard-ui/**'
      - '.github/workflows/ci.yml'

env:
  DOCKER_HUB_USERNAME: dongju101
  REGISTRY: docker.io

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed services
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            user-service:
              - 'user-service/**'
            blog-service:
              - 'blog-service/**'
            auth-service:
              - 'auth-service/**'
            api-gateway:
              - 'api-gateway/**'
            load-balancer:
              - 'load-balancer/**'
            dashboard-ui:
              - 'dashboard-ui/**'

  build-and-scan:
    name: Build and Scan
    needs: detect-changes
    if: needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(needs.detect-changes.outputs.services) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: false
          load: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Docker image (Main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.service }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
        if: github.event_name == 'pull_request'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: github.event_name == 'pull_request'
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

      - name: Run Trivy vulnerability scanner (JSON output for PR comment)
        uses: aquasecurity/trivy-action@master
        if: github.event_name == 'pull_request'
        with:
          image-ref: ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.service }}:test
          format: 'json'
          output: 'trivy-results-${{ matrix.service }}.json'
          severity: 'CRITICAL,HIGH'

      - name: Comment PR with Trivy results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const trivyResults = JSON.parse(fs.readFileSync('trivy-results-${{ matrix.service }}.json', 'utf8'));

            let vulnCount = 0;
            let criticalCount = 0;
            let highCount = 0;

            if (trivyResults.Results) {
              trivyResults.Results.forEach(result => {
                if (result.Vulnerabilities) {
                  result.Vulnerabilities.forEach(vuln => {
                    vulnCount++;
                    if (vuln.Severity === 'CRITICAL') criticalCount++;
                    if (vuln.Severity === 'HIGH') highCount++;
                  });
                }
              });
            }

            const body = `### üîí Trivy Security Scan Results - \`${{ matrix.service }}\`

            - **Total Vulnerabilities**: ${vulnCount}
            - **Critical**: ${criticalCount}
            - **High**: ${highCount}

            ${vulnCount === 0 ? '‚úÖ No critical or high vulnerabilities found!' : '‚ö†Ô∏è Please review the vulnerabilities in the Security tab.'}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  build-summary:
    name: Build Summary
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build-and-scan.result }}" == "success" ]; then
            echo "‚úÖ All builds completed successfully"
          else
            echo "‚ùå Some builds failed"
            exit 1
          fi
